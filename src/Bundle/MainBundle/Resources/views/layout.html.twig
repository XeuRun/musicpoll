{% extends "::base.html.twig" %}

{% block stylesheets %}
    {% stylesheets filter='cssrewrite'
        '//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css'
        '@MainBundle/Resources/public/css/select.css'
        '@MainBundle/Resources/public/css/ng-table.css'
        '@MainBundle/Resources/public/css/main.css'
    output='css/style.css' %}
    <link rel="stylesheet" href="{{ asset_url }}"/>
    {% endstylesheets %}
{% endblock %}
{% block javascripts %}
    {% javascripts
        '@MainBundle/Resources/public/js/lib/dklab_realplexor.js'
    %}
    <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}
    {% javascripts
        '//ajax.googleapis.com/ajax/libs/angularjs/1.4.0-beta.5/angular.js'
        '//ajax.googleapis.com/ajax/libs/angularjs/1.4.0-beta.5/angular-sanitize.js'
        '//ajax.googleapis.com/ajax/libs/angularjs/1.4.0-beta.5/angular-animate.js'
    %}
    <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}
    <script>
        (function() {
            "use strict";

            angular
            .module ('musicpoll', [ 'ui.bootstrap', 'ui.select', 'ngAnimate', 'ngSanitize' ])
            .run(function($rootScope) {
                $rootScope.realplexor = new Dklab_Realplexor('{{ config.realplexor_url }}', '{{ config.realplexor_namespace }}');
                $rootScope.realplexor.subscribe("Add_Song", function(data) {
                    $rootScope.$broadcast('song:add', data);
                });
                $rootScope.realplexor.subscribe("Remove_Song", function(data) {
                    $rootScope.$broadcast('song:remove', data);
                });
                $rootScope.realplexor.subscribe("Update_Song", function(data) {
                    $rootScope.$broadcast('song:update', data);
                });
                $rootScope.realplexor.subscribe("Mute_Song", function(data) {
                    $rootScope.$broadcast('song:mute', data);
                });
                $rootScope.realplexor.subscribe("Next_Song", function(data) {
                    $rootScope.$broadcast('song:next', data);
                });
                $rootScope.realplexor.subscribe("Rewind_Song", function(data) {
                    $rootScope.$broadcast('song:rewind', data);
                });
                $rootScope.realplexor.subscribe("Pause_Song", function(data) {
                    $rootScope.$broadcast('song:pause', data);
                });
                $rootScope.realplexor.execute();
            })
            .config (function($interpolateProvider, $sceDelegateProvider, $httpProvider) {
                $interpolateProvider.startSymbol('[[ ').endSymbol(' ]]');
                $sceDelegateProvider.resourceUrlWhitelist([
                    'self',
                    'http://cs*.vk.me/**'
                ]);
                $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';
                $httpProvider.defaults.headers.common["X-Requested-With"] = 'XMLHttpRequest';
            })
            .constant ("Config", {
                Routing: {
                    vote:       '{{ path('vote', {'id': '_ID_', 'choose': '_CHOOSE_'}) }}',
                    remove:     '{{ path('remove', {'id': '_ID_'}) }}',
                    add:        '{{ path('add') }}',
                    form:       '{{ path('form') }}',
                    mute:       '{{ path('mute', {'on': '_TYPE_'}) }}',
                    getPortion: '{{ path('get_portion', {'offset': '_OFFSET_'}) }}',
                    next:       '{{ path('next_song') }}',
                    getUsers:   '{{ path('get_users') }}',
                    whoVote:    '{{ path('who_vote', {'id': '_ID_'}) }}',
                    rewind:     '{{ path('rewind', {'time': '_TIME_'}) }}',
                    pause:      '{{ path('pause', {'on': '_TYPE_'}) }}',
                    vk_api:     'https://api.vk.com/method/_method_'
                },
                userId: {{ app.user.id }},
                player: {{ is_granted('ROLE_ADMIN') != true ? 0 : 1 }},
                token:  '71fcc118d02b311e47dbbc57f315952a3080a5fb68cf4f283107d18e971999f5e1fe61f53b1a7b58f39d9',
                UPDATE_USERS_INTERVAL: 300000 // 5 minutes
            })
            .filter('orderObjectBy', function() {
                return function(items, field, reverse) {
                    var filtered = [];

                    angular.forEach(items, function(item) {
                        filtered.push(item);
                    });
                    filtered.reverse();
                    filtered.sort(function (a, b) {
                        return (a[field] > b[field] ? 1 : -1);
                    });
                    if(reverse) {
                        filtered.reverse();
                    }

                    return filtered;
                };
            })
            .filter('points', function() {
                return function(input, limit) {
                    if (Math.abs(Number(limit)) === Infinity) {
                        limit = Number(limit);
                    } else {
                        limit = parseInt(limit);
                    }
                    if (isNaN(limit)) return input;

                    if (angular.isNumber(input)) input = input.toString();
                    if (!angular.isArray(input) && !angular.isString(input)) return input;

                    var result = input.slice(0, limit);
                    if(input.length > limit + 3) {
                        result += '...';
                    }
                    return result;
                };
            })
            .filter('reverse', function() {
                return function(items) {
                    return items.slice().reverse();
                };
            })
            .filter('filterObjectBy', function($filter) {
                var filter = $filter('filter');

                return function(map, expression, comparator) {
                    if (!expression) {
                        return map;
                    }

                    var result = {};
                    angular.forEach(map, function(data, index) {
                        if (filter([data], expression, comparator).length) {
                            result[index] = data;
                        }
                    });

                    return result;
                }
            });
        })();
    </script>
    {% javascripts
        '@MainBundle/Resources/public/js/Modules/*'
        '@MainBundle/Resources/public/js/Services/*'
        '@MainBundle/Resources/public/js/Directives/*'
        '@MainBundle/Resources/public/js/Controllers/*'
    %}
    <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}
{% endblock %}
